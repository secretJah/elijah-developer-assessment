// Routes
// The file does not need to import * of koa, only what is used
import { Context } from 'koa';
import * as Router from 'koa-router';

// Personal preference to leave a space between libraries and files
import { studentRepo } from '../repos/student.repo';
import { logRepo } from '../repos/assessmentLog.repo';

class StudentController {
    async display(ctx: Context) {
        // studentRepo.getLogsByStudent takes arg of number so need to parse studentid
        const studentId = parseInt(ctx.params.studentid);

        // Get all the Logs for a particular studentId. No data returns undefined.
        const student: Student | undefined = await studentRepo.getLogsByStudent(
            studentId
        );

        // If no logs for that student exist, early return.
        if (!student) {
            ctx.body = { error: 'No student found' };
        } else {
            // Instantiate the object to push Assessments to.
            const status: AssessmentStatus = {
                completed: [],
                expired: [],
                in_progress: [],
                open: [],
                upcoming: [],
            };

            // Get Logs generated by validated student
            const logsFromStudents:
                | AssessmentLog[]
                | undefined = await logRepo.getLogsByStudent(studentId);

            // Iterate through each log with forEach(map would be used if it returned anything)
            logsFromStudents?.forEach((singleLog: AssessmentLog): void => {
                // If Log shows assessment is complete
                if (singleLog.is_complete) {
                    // find assessment by assessment id(Always have to account for someone deleting something from DB)
                    const test:
                        | Assessments
                        | undefined = student.assessments.find(
                        (assessment) =>
                            assessment.id === singleLog.assessment_id
                    );
                    // Short-circuit and push to completed
                    test && status.completed.push(test);
                    // If there is a log for it, then else works. Its completed, in_progress, or expired (tbd later).
                } else {
                    // find assessment by assessment id
                    const test:
                        | Assessments
                        | undefined = student.assessments.find(
                        (assessment) =>
                            assessment.id === singleLog.assessment_id
                    );
                    // Short-circuit and push to in_progress
                    test && status.in_progress.push(test);
                }
            });

            // Get current time (Time Zone should have been asked)
            const timeNow: string = new Date().toISOString();

            // Iterate through each assessment with forEach(map would be used if it returned anything)
            student?.assessments.forEach((assessment: Assessments): void => {
                // If Open Time is greater than now its not open yet
                if (assessment.open_time > timeNow) {
                    // push assessment to upcoming
                    status.upcoming.push(assessment);
                    // Alternatively, if close time is less than now its closed
                } else if (
                    assessment.close_time < timeNow &&
                    !status.completed.includes(assessment)
                ) {
                    // push assessment to expired
                    status.expired.push(assessment);
                    // The BIG ElSE IF: If assessment is NOT Upcoming, Expired, Completed, or In Progress
                } else if (
                    assessment.close_time > timeNow &&
                    !status.completed.includes(assessment) &&
                    !status.in_progress.includes(assessment)
                ) {
                    // It has to be open so push to open
                    status.open.push(assessment);
                }
            });

            //
            const newInProgress: Assessments[] = status.in_progress.filter(
                (val) => !status.expired.includes(val)
            );

            // Of course there is an outlier that requires rule bending(Maybe the process of expired could have gone first.)
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            status['in_progress'] = newInProgress;

            ctx.body = {
                status,
            };
        }
    }
}

export const studentController = new StudentController();

const router = new Router();

router.get('/student/display/:studentid', studentController.display);

export const StudentRouters = router;
